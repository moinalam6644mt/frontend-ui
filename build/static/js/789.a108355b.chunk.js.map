{"version":3,"file":"static/js/789.a108355b.chunk.js","mappings":"+MAOA,MAsNA,EAtNuBA,KACrB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACzC,QAAEC,IAAYC,EAAAA,EAAAA,MACbC,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,KAChCO,EAAUC,IAAeR,EAAAA,EAAAA,UAAS,KAClCS,EAAiBC,IAAsBV,EAAAA,EAAAA,UAAS,IA2DjDW,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbV,MAAOA,EACPW,IAAIT,EACJE,SAAU,GACVE,gBAAiB,IAEnBM,iBAAkBC,EAAAA,GAAW,CAC3Bb,MAAOa,EAAAA,KAAab,MAAM,iBAAiBc,SAAS,uBAEtDC,gBAAgB,EAChBC,SAvDmBC,UACnB,IACE,IAAIC,EACJ,GAAoB,IAAhBvB,EACFuB,QAAiBpB,EAAQ,CACvBqB,IAAK,YACLC,OAAQ,OACRC,KAAMrB,IAERG,EAAWe,EAASG,MACpBzB,EAAe,GACf0B,EAAAA,GAAMC,QAAQL,EAASM,cAClB,GAAoB,IAAhB7B,EACTuB,QAAiBpB,EAAQ,CACvBqB,IAAK,cACLC,OAAQ,OACRC,KAAM,CACJV,IAAIT,KAGRN,EAAe,GACf0B,EAAAA,GAAMC,QAAQ,mCACT,GAAoB,IAAhB5B,EAAmB,CAC5B,GAAIS,IAAaE,EAWf,YADAgB,EAAAA,GAAMG,MAAM,0BARZP,QAAiBpB,EAAQ,CACvBqB,IAAK,mBACLC,OAAQ,OACRC,KAAMK,IAERJ,EAAAA,GAAMC,QAAQ,8BAMlB,CACF,CAAE,MAAOE,GACPE,QAAQF,MAAM,SAAUA,GACxBH,EAAAA,GAAMG,MAAM,iCACd,KAkBF,OACEG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,SAAS,aAAaC,cAAc,KAG7CH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcL,UAC3BC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAWL,UACxBC,EAAAA,EAAAA,KAAA,MAAAD,SACmB,IAAhBlC,EACG,kBACgB,IAAhBA,EACA,eACgB,IAAhBA,EACA,mBACA,UAKVmC,EAAAA,EAAAA,KAAA,WAASI,UAAU,8BAA6BL,UAC9CC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,YAAWL,UACxBD,EAAAA,EAAAA,MAAA,OAAKM,UAAU,gDAA+CL,SAAA,EAC5DD,EAAAA,EAAAA,MAAA,OAAKM,UAAU,kBAAiBL,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OACEK,IAAI,iCACJC,IAAI,GACJF,UAAU,eAEZJ,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yCACJD,EAAAA,EAAAA,MAAA,MAAIM,UAAU,uBAAsBL,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uCACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8CACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wCACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4DAGJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2EAMRC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBL,UAC9BD,EAAAA,EAAAA,MAAA,QACEM,UAAU,sBACVG,GAAG,aACHC,aAAa,MACbtB,SAAUR,EAAO+B,aAAaV,SAAA,EAE9BC,EAAAA,EAAAA,KAAA,MAAII,UAAU,OAAML,SAAC,oBACJ,IAAhBlC,IACCiC,EAAAA,EAAAA,MAAA,OAAKM,UAAU,qBAAoBL,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACEU,KAAK,QACLN,UAAU,eACVO,KAAK,QACLC,MAAOlC,EAAOkB,OAAO1B,MACrB2C,SAAUnC,EAAOoC,aACjBP,GAAG,QACHQ,YAAY,sBAEdf,EAAAA,EAAAA,KAAA,SAAOgB,QAAQ,QAAOjB,SAAC,UACtBrB,EAAOuC,QAAQ/C,OAASQ,EAAOwC,OAAOhD,QACrC8B,EAAAA,EAAAA,KAAA,OAAKmB,MAAO,CAAEC,MAAO,MAAOC,UAAW,UAAWtB,SAC/CrB,EAAOwC,OAAOhD,WAKN,IAAhBL,IACCiC,EAAAA,EAAAA,MAAA,OAAKM,UAAU,qBAAoBL,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACEU,KAAK,OACLN,UAAU,eACVO,KAAK,WACLC,MAAOxC,EACPyC,SAAWS,GArJVR,EAACS,EAAOb,KAC3B,MAAME,EAAQW,EAAMC,OAAOZ,MACd,QAATF,EACFrC,EAAWuC,GACO,aAATF,EACTnC,EAAYqC,GACM,aAATF,EACTjC,EAAmBmC,GACD,UAATF,GACTvC,EAASyC,EACX,EA2ImCE,CAAaQ,EAAG,OACjCf,GAAG,WACHQ,YAAY,eAEdf,EAAAA,EAAAA,KAAA,SAAOgB,QAAQ,WAAUjB,SAAC,iBAGb,IAAhBlC,IACCiC,EAAAA,EAAAA,MAAA,OAAKM,UAAU,qBAAoBL,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACEU,KAAK,WACLN,UAAU,eACVO,KAAK,WACLC,MAAOlC,EAAOkB,OAAOtB,SACrBuC,SAAUnC,EAAOoC,aACjBP,GAAG,WACHQ,YAAY,wBAEdf,EAAAA,EAAAA,KAAA,SAAOgB,QAAQ,WAAUjB,SAAC,oBAGb,IAAhBlC,IACCiC,EAAAA,EAAAA,MAAA,OAAKM,UAAU,qBAAoBL,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACEU,KAAK,WACLN,UAAU,eACVO,KAAK,kBACLC,MAAOlC,EAAOkB,OAAOpB,gBACrBqC,SAAUnC,EAAOoC,aACjBP,GAAG,kBACHQ,YAAY,2BAEdf,EAAAA,EAAAA,KAAA,SAAOgB,QAAQ,kBAAiBjB,SAAC,yBAGrCC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,SAAQL,UACrBC,EAAAA,EAAAA,KAAA,UAAQU,KAAK,SAASN,UAAU,oBAAmBL,SAChC,IAAhBlC,EACG,SACgB,IAAhBA,EACA,eACA,wBAIRmC,EAAAA,EAAAA,KAAA,KAAGI,UAAU,WAAUL,UACrBC,EAAAA,EAAAA,KAACyB,EAAAA,GAAI,CAACC,GAAG,SAAQ3B,SAAC,0BAO1B,C","sources":["components/Authentication/ForgetPassword/ForgetPassword.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AuthUser from \"../Validation/AuthUser\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nconst ForgetPassword = () => {\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const { callApi } = AuthUser();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [otpData, setOtpData] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const handleChange = (event, type) => {\r\n    const value = event.target.value;\r\n    if (type === \"otp\") {\r\n      setOtpData(value);\r\n    } else if (type === \"password\") {\r\n      setPassword(value);\r\n    } else if (type === \"password\") {\r\n      setConfirmPassword(value);\r\n    } else if (type === \"email\") {\r\n      setEmail(value);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (values) => {\r\n    try {\r\n      let response;\r\n      if (currentStep === 1) {\r\n        response = await callApi({\r\n          api: \"/send-otp\",\r\n          method: \"POST\",\r\n          data: email,\r\n        });\r\n        setOtpData(response.data);\r\n        setCurrentStep(2);\r\n        toast.success(response.message);\r\n      } else if (currentStep === 2) {\r\n        response = await callApi({\r\n          api: \"/verify-otp\",\r\n          method: \"POST\",\r\n          data: {\r\n            otp:otpData\r\n          },\r\n        });\r\n        setCurrentStep(3);\r\n        toast.success(\"OTP validated successfully\");\r\n      } else if (currentStep === 3) {\r\n        if (password === confirmPassword) {\r\n          // Passwords match, proceed with reset\r\n          response = await callApi({\r\n            api: \"/update_password\",\r\n            method: \"POST\",\r\n            data: values,\r\n          });\r\n          toast.success(\"Password reset successfully\");\r\n        } else {\r\n          // Passwords don't match, show error toast\r\n          toast.error(\"Passwords do not match\");\r\n          return; // Stop further execution\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      toast.error(\"Failed to complete the process\");\r\n    }\r\n  };\r\n  \r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: email,\r\n      otp:otpData,\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string().email(\"Invalid email\").required(\"Email is required\"),\r\n    }),\r\n    validateOnBlur: true,\r\n    onSubmit: handleSubmit,\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Toaster position=\"top-center\" reverseOrder={false} />\r\n\r\n      {/* short banner */}\r\n      <div className=\"short-banner\">\r\n        <div className=\"container\">\r\n          <h1>\r\n            {currentStep === 1\r\n              ? \"Forget Password\"\r\n              : currentStep === 2\r\n              ? \"Validate OTP\"\r\n              : currentStep === 3\r\n              ? \"Set New Password\"\r\n              : \"\"}\r\n          </h1>\r\n        </div>\r\n      </div>\r\n\r\n      <section className=\"section authentication-page\">\r\n        <div className=\"container\">\r\n          <div className=\"row justify-content-center align-items-center\">\r\n            <div className=\"col-lg-6 col-12\">\r\n              <img\r\n                src=\"./images/property-vector-2.png\"\r\n                alt=\"\"\r\n                className=\"img-fluid\"\r\n              />\r\n              <h4>Things you can do with this account</h4>\r\n              <ul className=\"list list-1 list-get\">\r\n                <li>Post one Single Property for FREE</li>\r\n                <li>Set property alerts for your requirement</li>\r\n                <li>Get accessed by over 1 Lakh buyers</li>\r\n                <li>Showcase your property as Rental, PG or for Sale</li>\r\n                <li>Get instant queries over Phone, Email and SMS</li>\r\n                <li>\r\n                  Performance in search &amp; Track responses &amp; views online\r\n                </li>\r\n                <li>\r\n                  Add detailed property information &amp; multiple photos per\r\n                  listing\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"col-lg-6 col-12\">\r\n              <form\r\n                className=\"authentication-form\"\r\n                id=\"login_form\"\r\n                autoComplete=\"off\"\r\n                onSubmit={formik.handleSubmit}\r\n              >\r\n                <h3 className=\"mb-4\">Forgot Password</h3>\r\n                {currentStep === 1 && (\r\n                  <div className=\"form-floating mb-3\">\r\n                    <input\r\n                      type=\"email\"\r\n                      className=\"form-control\"\r\n                      name=\"email\"\r\n                      value={formik.values.email}\r\n                      onChange={formik.handleChange}\r\n                      id=\"email\"\r\n                      placeholder=\"Enter your email\"\r\n                    />\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    {formik.touched.email && formik.errors.email && (\r\n                      <div style={{ color: \"red\", fontStyle: \"italic\" }}>\r\n                        {formik.errors.email}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {currentStep === 2 && (\r\n                  <div className=\"form-floating mb-3\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"otp_data\"\r\n                      value={otpData}\r\n                      onChange={(e) => handleChange(e, \"otp\")}\r\n                      id=\"otp_data\"\r\n                      placeholder=\"Enter OTP\"\r\n                    />\r\n                    <label htmlFor=\"otp_data\">Enter OTP</label>\r\n                  </div>\r\n                )}\r\n                {currentStep === 3 && (\r\n                  <div className=\"form-floating mb-3\">\r\n                    <input\r\n                      type=\"password\"\r\n                      className=\"form-control\"\r\n                      name=\"password\"\r\n                      value={formik.values.password}\r\n                      onChange={formik.handleChange}\r\n                      id=\"password\"\r\n                      placeholder=\"Enter new password\"\r\n                    />\r\n                    <label htmlFor=\"password\">New Password</label>\r\n                  </div>\r\n                )}\r\n                {currentStep === 3 && (\r\n                  <div className=\"form-floating mb-3\">\r\n                    <input\r\n                      type=\"password\"\r\n                      className=\"form-control\"\r\n                      name=\"confirmPassword\"\r\n                      value={formik.values.confirmPassword}\r\n                      onChange={formik.handleChange}\r\n                      id=\"confirmPassword\"\r\n                      placeholder=\"Re-enter new password\"\r\n                    />\r\n                    <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                  </div>\r\n                )}\r\n                <div className=\"d-grid\">\r\n                  <button type=\"submit\" className=\"btn btn-site mb-2\">\r\n                    {currentStep === 1\r\n                      ? \"Submit\"\r\n                      : currentStep === 2\r\n                      ? \"Validate OTP\"\r\n                      : \"Set New Password\"}\r\n                  </button>\r\n                </div>\r\n\r\n                <p className=\"text-end\">\r\n                  <Link to=\"/login\">Login</Link>\r\n                </p>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgetPassword;\r\n"],"names":["ForgetPassword","currentStep","setCurrentStep","useState","callApi","AuthUser","email","setEmail","otpData","setOtpData","password","setPassword","confirmPassword","setConfirmPassword","formik","useFormik","initialValues","otp","validationSchema","Yup","required","validateOnBlur","onSubmit","async","response","api","method","data","toast","success","message","error","values","console","_jsxs","children","_jsx","Toaster","position","reverseOrder","className","src","alt","id","autoComplete","handleSubmit","type","name","value","onChange","handleChange","placeholder","htmlFor","touched","errors","style","color","fontStyle","e","event","target","Link","to"],"sourceRoot":""}